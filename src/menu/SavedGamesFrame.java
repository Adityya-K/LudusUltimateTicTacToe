/*
 * Group Name: Ludus 
 * Members: Adityya Kaushal, Alexander Tan, Eksjot Multani, Owen Yang
 * ICS4UE
 * August 20-22, 2023
 * Mr. Diakoloukas
 * Purpose: to create a page with the saved games
 * 
 */
package menu;

import authentication_frames.LoginFrame;
import java.util.ArrayList;
import user.UserDatabase;
import javax.swing.JOptionPane;
import javax.swing.table.*;
import normal_tic_tac_toe.NormalTicTacToeAIFrame;
import normal_tic_tac_toe.NormalTicTacToeFrame;
import ultimate_tic_tac_toe.UltimateTicTacToeAIFrame;
import ultimate_tic_tac_toe.UltimateTicTacToeFrame;
import user.CurrentUser;
import user.SavedGame;

/**
 *
 * @author gaudium
 */
public class SavedGamesFrame extends javax.swing.JFrame {

    /**
     * Creates new form frmLogin
     */
    public SavedGamesFrame() {
        // Displays the JFrame at the center position of the screen
        setSize(938, 788);
        setLocationRelativeTo(null); // this method display the JFrame to center position of a screen
        initComponents();
    }
    
    /**
     * A method that displays saved games
     */
    public void displaySavedGames() {
        // Get saved games from a database and store it as an arrayList
        ArrayList <SavedGame> gamesPlayed = CurrentUser.getUser().getGames();
        
        // Create a new model for the output table so that we can manipulate
        // how many rows it has
        DefaultTableModel model = (DefaultTableModel) tblSavedGames.getModel();
        
        // Reset the row count to zero
        model.setRowCount(0);
        
        // Loop through the total amount of saved games from that user
        for (int i = 0; i < gamesPlayed.size(); i++) {
            // Add a row for each game with the type of game (i.e. normal or ultimate),
            // the opponent (i.e. AI or player) and the difficulty of the AI
            // if the opponent if it is AI (decided by ternary operator)
            model.addRow(new Object[]{gamesPlayed.get(i).getSavedDate(), gamesPlayed.get(i).getGameType().toUpperCase(), gamesPlayed.get(i).getOpponentType().toUpperCase(), gamesPlayed.get(i).getAIDifficulty() == null || gamesPlayed.get(i).getAIDifficulty().equals("null") ? "N/A" : gamesPlayed.get(i).getAIDifficulty().toUpperCase()});
        }
        
               
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSavedGames = new javax.swing.JTable();
        btnGoToMain = new javax.swing.JButton();
        lblDescription = new javax.swing.JLabel();
        btnClearSavedGames = new javax.swing.JButton();
        btnLoadGame = new javax.swing.JButton();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(938, 788));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        lblTitle.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Saved Games");
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 150, 940, 50);

        tblSavedGames.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Time Saved", "Type of Game", "Opponent", "AI Difficulty"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSavedGames.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblSavedGames);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(100, 230, 740, 350);

        btnGoToMain.setBackground(new java.awt.Color(0, 102, 255));
        btnGoToMain.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnGoToMain.setForeground(new java.awt.Color(255, 255, 255));
        btnGoToMain.setText("Go To Main Menu");
        btnGoToMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoToMainActionPerformed(evt);
            }
        });
        getContentPane().add(btnGoToMain);
        btnGoToMain.setBounds(620, 600, 220, 40);

        lblDescription.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        lblDescription.setForeground(new java.awt.Color(255, 255, 255));
        lblDescription.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDescription.setText("Select a game and press \"Load Game\" to resume play!");
        getContentPane().add(lblDescription);
        lblDescription.setBounds(0, 200, 940, 26);

        btnClearSavedGames.setBackground(new java.awt.Color(0, 102, 255));
        btnClearSavedGames.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnClearSavedGames.setForeground(new java.awt.Color(255, 255, 255));
        btnClearSavedGames.setText("Clear Saved Games");
        btnClearSavedGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearSavedGamesActionPerformed(evt);
            }
        });
        getContentPane().add(btnClearSavedGames);
        btnClearSavedGames.setBounds(350, 600, 240, 40);

        btnLoadGame.setBackground(new java.awt.Color(0, 102, 255));
        btnLoadGame.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnLoadGame.setForeground(new java.awt.Color(255, 255, 255));
        btnLoadGame.setText("Load Game");
        btnLoadGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadGameActionPerformed(evt);
            }
        });
        getContentPane().add(btnLoadGame);
        btnLoadGame.setBounds(100, 600, 210, 40);

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image_assets/leaderboard-background.png"))); // NOI18N
        lblBackground.setText("jLabel1");
        lblBackground.setMaximumSize(new java.awt.Dimension(940, 788));
        lblBackground.setMinimumSize(new java.awt.Dimension(940, 788));
        lblBackground.setName(""); // NOI18N
        lblBackground.setPreferredSize(new java.awt.Dimension(940, 850));
        getContentPane().add(lblBackground);
        lblBackground.setBounds(0, 0, 940, 788);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoadGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadGameActionPerformed
        // Store the row that the user selected, since the indexing of the table
        // starts from 0, no further operations are needed
        int rowSelected = tblSavedGames.getSelectedRow();
        
        // Check if it didn't return negative 1, if it did, no row is selected
        if (rowSelected != -1) {
            // Get the gamesPlay from the user and store it as an ArrayList
            ArrayList <SavedGame> gamesPlayed = CurrentUser.getUser().getGames();
            // Get the type of game of the game the user pressed using the
            // row they selected
            String gameType = gamesPlayed.get(rowSelected).getGameType();
            // Get the type of opponent of the game the user pressed using the
            // row they selected
            String opponentType = gamesPlayed.get(rowSelected).getOpponentType();
            
            // Check if the game type is normal
            if (gameType.equals("normal")) {
                // Check if the opponent is a computer
                if (opponentType.equals("computer")) {
                    // Get the board from the game and store it as an array of
                    // Strings to be passed as a parameter. We seperate the
                    // letters from the database using ":"
                    String[] board = gamesPlayed.get(rowSelected).getPosition().split(":");
                    
                    // Create the normal tic tac toe AI frame
                    NormalTicTacToeAIFrame frmTicTacToeAI = new NormalTicTacToeAIFrame();
                    
                    // Set the game properties to the corresponding ones from the
                    // database so that the user loads in to a game with played
                    // moves
                    frmTicTacToeAI.setGameProperties(gamesPlayed.get(rowSelected).getAIDifficulty(), gamesPlayed.get(rowSelected).getPlayer1Piece().equals("X") ? "O" : "X", gamesPlayed.get(rowSelected).getPlayer1Piece(), board);
                    
                    // Make the normal tic tac toe AI frame visible
                    frmTicTacToeAI.setVisible(true);
                    
                    // Dispose the current frame
                    this.dispose();
                }
                // If it isn't a computer then it is human
                else {
                    // Get the board from the game and store it as an array of
                    // Strings to be passed as a parameter. We seperate the
                    // letters from the database using ":"
                    String[] board = gamesPlayed.get(rowSelected).getPosition().split(":");
                    
                    // Create the normal tic tac toe without AI frame
                    NormalTicTacToeFrame frmTicTacToe = new NormalTicTacToeFrame();
                    
                    // Set the game properties to the corresponding ones from the
                    // database so that the user loads in to a game with played
                    // moves
                    frmTicTacToe.setGameProperties(gamesPlayed.get(rowSelected).getTurn(), board);
                    
                    // Make the normal tic tac toe without AI frame visible
                    frmTicTacToe.setVisible(true);
                    
                    // Dispose the current frame
                    this.dispose();
                }
            }
            // If it is not normal tic tac toe, then it is ultimate
            else {
                // Check if the opponent is a computer
                if (opponentType.equals("computer")) {
                    // Parse the board from the data base using the seperator,
                    // the colon, ":". We store this as a 1D array to be
                    // converted into a 2D array
                    String[] board1D = gamesPlayed.get(rowSelected).getPosition().split(":");
                    
                    // Declare a 2D array to be passed as a parameter to create
                    // the board of the ultimate TicTacToe game
                    String[][] board = new String[9][9];
                    
                    // Get an iterator to iterate through the 1D array
                    int iterator = 0;
                    
                    // Loop through the 9 arrays in board
                    for (int i = 0; i < 9; i++) {
                        // Loop through the 9 elements of each array
                        for (int j = 0; j < 9; j++) {
                            // Set the element to its corresponding element
                            // on the 1D array
                            board[i][j] = board1D[iterator];
                            
                            // Add one to the iterator to keep iterating
                            iterator++;
                        }
                    }
                    
                    // The last elemtn of the 1D board is actually the index
                    // of the current Section (which one of 9 mini TicTacToe 
                    // boards) that was last left off on in the game so we store
                    // it
                    int currentSectionIndex = Integer.parseInt(board1D[81]);
                    
                    // Create the ultimate tic tac toe with AI frame
                    UltimateTicTacToeAIFrame frmUltimateTicTacToeAI = new UltimateTicTacToeAIFrame();
                    
                    // Set the game properties to the corresponding ones from the
                    // database so that the user loads in to a game with played
                    // moves
                    frmUltimateTicTacToeAI.setGameProperties(gamesPlayed.get(rowSelected).getAIDifficulty(), gamesPlayed.get(rowSelected).getPlayer1Piece(),  gamesPlayed.get(rowSelected).getPlayer1Piece().equals("X") ? "O" : "X", board, currentSectionIndex);
                    
                    // Make the ultimate tic tac toe with AI frame visible
                    frmUltimateTicTacToeAI.setVisible(true);
                    
                    // Dispose the current frame
                    this.dispose();
                    
                }
                // If it isn't a computer then it is human
                else {
                    // Parse the board from the data base using the seperator,
                    // the colon, ":". We store this as a 1D array to be
                    // converted into a 2D array
                    String[] board1D = gamesPlayed.get(rowSelected).getPosition().split(":");
                    
                    // Declare a 2D array to be passed as a parameter to create
                    // the board of the ultimate TicTacToe game
                    String[][] board = new String[9][9];
                    
                    // Get an iterator to iterate through the 1D array
                    int iterator = 0;
                    
                    // Loop through the 9 arrays in board
                    for (int i = 0; i < 9; i++) {
                        // Loop through the 9 elements of each array
                        for (int j = 0; j < 9; j++) {
                            // Set the element to its corresponding element
                            // on the 1D array
                            board[i][j] = board1D[iterator];
                            
                            // Add one to the iterator to keep iterating
                            iterator++;
                        }
                    }
                    
                    // The last elemtn of the 1D board is actually the index
                    // of the current Section (which one of 9 mini TicTacToe 
                    // boards) that was last left off on in the game so we store
                    // it
                    int currentSectionIndex = Integer.parseInt(board1D[81]);
                    
                    // Create the ultimate tic tac toe without AI frame
                    UltimateTicTacToeFrame frmUltimateTicTacToe = new UltimateTicTacToeFrame();
                    
                    // Set the game properties to the corresponding ones from the
                    // database so that the user loads in to a game with played
                    // moves
                    frmUltimateTicTacToe.setGameProperties( gamesPlayed.get(rowSelected).getPlayer1Piece(), board, currentSectionIndex, gamesPlayed.get(rowSelected).getTurn());
                    
                    // Make the ultimate tic tac toe without AI frame visible
                    frmUltimateTicTacToe.setVisible(true);
                    
                    // Dispose the current frame
                    this.dispose();
                }
            } 
        }
        // If the user did not select a row
        else {
            // Tell the user to select a row
            JOptionPane.showMessageDialog(this, "Select a single row", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnLoadGameActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Displays the login page if the current user is null when the window is opened
        if(CurrentUser.getUser() == null) {
            LoginFrame frmLogin = new LoginFrame();
            frmLogin.setVisible(true);
            this.dispose();
        }
        // Loads the database and displays the saved games
        else {
            UserDatabase.loadDatabase();
            displaySavedGames();
        }
    }//GEN-LAST:event_formWindowOpened

    private void btnGoToMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoToMainActionPerformed
        // Displays the main menu
        MainMenuFrame frmMainMenu = new MainMenuFrame(); 
        frmMainMenu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnGoToMainActionPerformed

    private void btnClearSavedGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearSavedGamesActionPerformed
        // Clears the games and displays an empty list
        CurrentUser.getUser().clearGames();
        UserDatabase.saveUsers();
        displaySavedGames();
    }//GEN-LAST:event_btnClearSavedGamesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SavedGamesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SavedGamesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SavedGamesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SavedGamesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SavedGamesFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearSavedGames;
    private javax.swing.JButton btnGoToMain;
    private javax.swing.JButton btnLoadGame;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblSavedGames;
    // End of variables declaration//GEN-END:variables
}
